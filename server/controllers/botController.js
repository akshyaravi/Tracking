const Application = require('../models/Application');
const JobRole = require('../models/JobRole');
const ActivityLog = require('../models/ActivityLog');
const User = require('../models/User');

// Bot mimic automated updates
const processAutomatedUpdates = async (req, res) => {
  try {
    // Find bot user
    const botUser = await User.findOne({ role: 'bot' });
    if (!botUser) {
      return res.status(404).json({ message: 'Bot user not found' });
    }

    // Get technical role applications that can be automated
    const technicalRoles = await JobRole.find({ type: 'technical' });
    const applications = await Application.find({
      jobRole: { $in: technicalRoles.map(role => role._id) },
      status: { $in: ['applied', 'reviewed', 'interview'] }
    }).populate('jobRole', 'title type');

    const updates = [];
    const statusFlow = {
      'applied': { next: 'reviewed', comment: 'Application reviewed by automated system' },
      'reviewed': { next: 'interview', comment: 'Interview scheduled automatically' },
      'interview': { next: 'offer', comment: 'Offer generated by automated system' }
    };

    for (const app of applications) {
      // Simulate random progression (70% chance)
      if (Math.random() > 0.3) {
        const currentStatus = app.status;
        const nextStep = statusFlow[currentStatus];
        
        if (nextStep) {
          // Update application status
          app.status = nextStep.next;
          app.isAutomated = true;
          await app.save();

          // Log activity
          await ActivityLog.create({
            application: app._id,
            action: `Automated status update to ${nextStep.next}`,
            previousStatus: currentStatus,
            newStatus: nextStep.next,
            comment: nextStep.comment,
            performedBy: botUser._id,
            performedByRole: 'bot',
            isAutomated: true
          });

          updates.push({
            applicationId: app._id,
            jobTitle: app.jobRole.title,
            previousStatus: currentStatus,
            newStatus: nextStep.next,
            comment: nextStep.comment
          });
        }
      }
    }

    res.json({
      message: `Processed ${updates.length} automated updates`,
      updates
    });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Get bot activity summary
const getBotActivity = async (req, res) => {
  try {
    const botActivities = await ActivityLog.find({ isAutomated: true })
      .populate('application', 'status')
      .populate('performedBy', 'username')
      .sort({ createdAt: -1 })
      .limit(50);

    const stats = {
      totalAutomatedActions: botActivities.length,
      todayActions: botActivities.filter(activity => {
        const today = new Date();
        const activityDate = new Date(activity.createdAt);
        return activityDate.toDateString() === today.toDateString();
      }).length,
      recentActivities: botActivities.slice(0, 10)
    };

    res.json({ stats });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Manual trigger for specific application
const triggerApplicationUpdate = async (req, res) => {
  try {
    const { applicationId } = req.params;
    const { comment } = req.body;

    const application = await Application.findById(applicationId)
      .populate('jobRole', 'type');

    if (!application) {
      return res.status(404).json({ message: 'Application not found' });
    }

    if (application.jobRole.type !== 'technical') {
      return res.status(400).json({ 
        message: 'Bot can only process technical role applications' 
      });
    }

    const statusFlow = {
      'applied': 'reviewed',
      'reviewed': 'interview',
      'interview': 'offer'
    };

    const nextStatus = statusFlow[application.status];
    if (!nextStatus) {
      return res.status(400).json({ 
        message: 'Application cannot be progressed further automatically' 
      });
    }

    const previousStatus = application.status;
    application.status = nextStatus;
    application.isAutomated = true;
    await application.save();

    // Log activity
    await ActivityLog.create({
      application: application._id,
      action: `Manual bot update to ${nextStatus}`,
      previousStatus,
      newStatus: nextStatus,
      comment: comment || `Automated progression to ${nextStatus}`,
      performedBy: req.user._id,
      performedByRole: 'bot',
      isAutomated: true
    });

    res.json({
      message: 'Application updated successfully',
      application: {
        id: application._id,
        previousStatus,
        newStatus: nextStatus
      }
    });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

module.exports = {
  processAutomatedUpdates,
  getBotActivity,
  triggerApplicationUpdate
};